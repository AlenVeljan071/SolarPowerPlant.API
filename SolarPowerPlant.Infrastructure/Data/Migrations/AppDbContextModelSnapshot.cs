// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolarPowerPlant.Infrastructure.Data.Context;

#nullable disable

namespace SolarPowerPlant.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SolarPowerPlant.Core.Entities.SolarPowerPlant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstalledPower")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(12, 9)
                        .HasColumnType("decimal(12,9)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(12, 9)
                        .HasColumnType("decimal(12,9)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SolarPowerPlant");
                });

            modelBuilder.Entity("SolarPowerPlant.Core.Entities.TimeseriesProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Production")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ProductionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SolarPowerPlantId")
                        .HasColumnType("int");

                    b.Property<int>("TimeSerieType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SolarPowerPlantId");

                    b.ToTable("TimeseriesProduction");
                });

            modelBuilder.Entity("SolarPowerPlant.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Salt")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SolarPowerPlant.Core.Entities.SolarPowerPlant", b =>
                {
                    b.HasOne("SolarPowerPlant.Core.Entities.User", "User")
                        .WithMany("SolarPowerPlants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SolarPowerPlant.Core.Entities.AddressEntity", "Address", b1 =>
                        {
                            b1.Property<int>("SolarPowerPlantId")
                                .HasColumnType("int");

                            b1.Property<string>("Address")
                                .HasColumnType("varchar(100)");

                            b1.Property<string>("City")
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("Country")
                                .HasColumnType("varchar(50)");

                            b1.HasKey("SolarPowerPlantId");

                            b1.ToTable("SolarPowerPlant");

                            b1.WithOwner()
                                .HasForeignKey("SolarPowerPlantId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SolarPowerPlant.Core.Entities.TimeseriesProduction", b =>
                {
                    b.HasOne("SolarPowerPlant.Core.Entities.SolarPowerPlant", "SolarPowerPlant")
                        .WithMany("TimeseriesProductions")
                        .HasForeignKey("SolarPowerPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SolarPowerPlant");
                });

            modelBuilder.Entity("SolarPowerPlant.Core.Entities.User", b =>
                {
                    b.OwnsOne("SolarPowerPlant.Core.Entities.AddressEntity", "Address", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Address")
                                .HasColumnType("varchar(100)");

                            b1.Property<string>("City")
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("Country")
                                .HasColumnType("varchar(50)");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SolarPowerPlant.Core.Entities.SolarPowerPlant", b =>
                {
                    b.Navigation("TimeseriesProductions");
                });

            modelBuilder.Entity("SolarPowerPlant.Core.Entities.User", b =>
                {
                    b.Navigation("SolarPowerPlants");
                });
#pragma warning restore 612, 618
        }
    }
}
